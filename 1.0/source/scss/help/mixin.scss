// Between-breakpoints
@mixin between-breakpoints($min, $max) {
  @media (min-width: $min) and (max-width: $max){
    @content;
  }
}

// CSS reset
@mixin cssreset() {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

// Sizing shortcuts
// @include size(60px);
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Center-align a block level element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Text overflow
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// vertical-center-items
@mixin vertical-center-items() {
  display: flex;
  align-items: center;
}

// opacity
@mixin opacity($opacity) {
  opacity: $opacity;
}

// Clearfix
@mixin clearfix() {
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}

// Placeholder text
@mixin placeholder($color: $placeholder-color) {
  &::-moz-placeholder {
    color: $color;
  }

  &::-moz-placeholder {
    color: $color;
  }

  &::-ms-input-placeholder {
    color: $color;
  }

  &::-webkit-input-placeholder {
    color: $color;
  }
}


// Usage
// Convert px to em
// font-size: em(12px);
// font-size: em(12);
@function em($pixels, $context: $font-size-base) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

// Usage
// Convert px to rem
// @include rem(font-size, 1.6rem);
// @include rem(padding, 20px 10px);

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px: append($px , $value);
      $rem: append($rem, $value);
    }@else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == 'px' {  /* 7 */
        $px: append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == 'rem' { /* 7 */
        $px: append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}
